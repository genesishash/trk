// Generated by IcedCoffeeScript 108.0.11
(function() {
  var Members, Metrics, async, iced, ident, log, lp, minimatch, _, __iced_k, __iced_k_noop,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  iced = {
    Deferrals: (function() {
      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) {
          return this.continuation(this.ret);
        }
      };

      _Class.prototype.defer = function(defer_params) {
        ++this.count;
        return (function(_this) {
          return function() {
            var inner_params, _ref;
            inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            if (defer_params != null) {
              if ((_ref = defer_params.assign_fn) != null) {
                _ref.apply(null, inner_params);
              }
            }
            return _this._fulfill();
          };
        })(this);
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    },
    trampoline: function(_fn) {
      return _fn();
    }
  };
  __iced_k = __iced_k_noop = function() {};

  log = function() {
    var x;
    x = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    try {
      return console.log.apply(console, x);
    } catch (_error) {}
  };

  lp = function(x) {
    return log(JSON.stringify(x, null, 2));
  };

  _ = require('wegweg')({
    globals: false
  });

  require('date-utils');

  async = require('async');

  minimatch = require('minimatch');

  Members = require('taky-redis-members');

  ident = require('./lib/redis-ident');

  module.exports = Metrics = (function() {
    function Metrics(opt) {
      var k, v, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;
      if (opt == null) {
        opt = {};
      }
      this.redis = (_ref = (_ref1 = opt.redis) != null ? _ref1 : opt.client) != null ? _ref : _.redis();
      this.memcached = (_ref2 = (_ref3 = opt.memcached) != null ? _ref3 : opt.memcached) != null ? _ref2 : _.memcached();
      this.key = (_ref4 = (_ref5 = opt.key) != null ? _ref5 : opt.prefix) != null ? _ref4 : 'tky';
      this.members_keys = new Members({
        redis: this.redis,
        prefix: this.key + ':k'
      });
      this.map = {
        bmp: [],
        add: [],
        addv: [],
        top: []
      };
      if (opt.map) {
        _ref6 = opt.map;
        for (k in _ref6) {
          v = _ref6[k];
          this.map[k] = v;
        }
      }
    }

    Metrics.prototype.record = function(event, cb) {
      var arr, cat, dkey, e, key, keys_queue, label_key, m, obj, r, today, value_key, x, y, ___iced_passed_deferral, __iced_deferrals, __iced_k, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      dkey = this.key + ':' + (today = _.today());
      obj = _.clone(event);
      for (x in obj) {
        for (y in obj) {
          if (x !== y && !x.match(/\~/) && !y.match(/\~/)) {
            cat = [x, y].sort();
            key = cat.join('~');
            if (!obj[key]) {
              obj[key] = obj[cat[0]] + '~' + obj[cat[1]];
            }
          }
        }
      }
      arr = [];
      keys_queue = [];
      m = this.redis.multi();
      if ((_ref = this.map.bmp) != null ? _ref.length : void 0) {
        _ref1 = this.map.bmp;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          x = _ref1[_i];
          if (x.match(/\~/)) {
            x = x.split(/\~/).sort().join('~');
          }
          if (obj[x]) {
            (function(_this) {
              return (function(x) {
                var bmp_id, bmp_key, fns;
                bmp_id = ident(_this.redis, dkey + ':bmp:i:' + x);
                bmp_key = dkey + ':bmp:' + x;
                keys_queue.push(bmp_key = dkey + ':bmp:' + x);
                fns = [
                  function(c) {
                    return bmp_id(obj[x], function(e, id) {
                      return c(null, id);
                    });
                  }, function(i, c) {
                    return _this.redis.setbit(bmp_key, i, 1, function(e, r) {
                      return c(null, r);
                    });
                  }
                ];
                return arr.push(function(c) {
                  return async.waterfall(fns, c);
                });

                /*
                 * hyperloglog implementation; no noticable performance benefit
                arr.push ((c) =>
                  @redis.send_command 'pfadd', [bmp_key,obj[x]], c
                )
                 */
              });
            })(this)(x);
          }
        }
      }
      if ((_ref2 = this.map.add) != null ? _ref2.length : void 0) {
        _ref3 = this.map.add;
        for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
          x = _ref3[_j];
          if (x.match(/\~/)) {
            x = x.split(/\~/).sort().join('~');
          }
          if (obj[x]) {
            (function(_this) {
              return (function(x) {
                var add_key;
                add_key = dkey + ':add:' + x;
                keys_queue.push(add_key);
                return m.hincrby(add_key, obj[x], 1);
              });
            })(this)(x);
          }
        }
      }
      if ((_ref4 = this.map.top) != null ? _ref4.length : void 0) {
        _ref5 = this.map.top;
        for (_k = 0, _len2 = _ref5.length; _k < _len2; _k++) {
          x = _ref5[_k];
          if (x.match(/\~/)) {
            x = x.split(/\~/).sort().join('~');
          }
          if (obj[x]) {
            (function(_this) {
              return (function(x) {
                var set_key;
                set_key = dkey + ':top:' + x;
                keys_queue.push(set_key);
                return m.zincrby(set_key, 1, obj[x]);
              });
            })(this)(x);
          }
        }
      }
      if ((_ref6 = this.map.addv) != null ? _ref6.length : void 0) {
        _ref7 = this.map.addv;
        for (_l = 0, _len3 = _ref7.length; _l < _len3; _l++) {
          x = _ref7[_l];
          if (_.type(x) === 'object') {
            label_key = x.key;
            value_key = (_ref8 = x.value) != null ? _ref8 : x.val;
          } else {
            label_key = x;
            value_key = x;
          }
          if (label_key.match(/\~/)) {
            label_key = label_key.split(/\~/).sort().join('~');
          }
          if (obj[label_key] && obj[value_key] && !isNaN(obj[value_key])) {
            (function(_this) {
              return (function(label_key, value_key) {
                var add_key, tot_key;
                add_key = dkey + ':addv:' + value_key + ':' + label_key;
                tot_key = dkey + ':addv:' + value_key + ':' + 'i';
                keys_queue.push(add_key);
                keys_queue.push(tot_key);
                if (label_key !== value_key) {
                  m.hincrby(add_key, obj[label_key], pi(obj[value_key]));
                }
                m.hincrby(tot_key, 'sum', pi(obj[value_key]));
                return m.hincrby(tot_key, 'count', 1);
              });
            })(this)(label_key, value_key);
          }
        }
      }
      arr.push((function(_this) {
        return function(c) {
          return _this.members_keys.add(today, keys_queue, c);
        };
      })(this));
      arr.push((function(c) {
        return m.exec(c);
      }));
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/taky/www/trk/src/module.iced",
            funcname: "Metrics.record"
          });
          _.par(arr, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                e = arguments[0];
                return r = arguments[1];
              };
            })(),
            lineno: 147
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (cb) {
            return cb(null, r);
          }
        };
      })(this));
    };

    Metrics.prototype.query = function(min, max, opt, cb) {
      var all_days, arr, blacklist, dkey, e, e2, fns, func, job_keys, jobs, k, max_date, min_date, num_days, parts, path, pattern, prefix, r, r2, raw, results, ret, type, v, valid, x, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      if (!cb && _.type(opt) === 'function') {
        cb = opt;
        opt = {};
      }
      dkey = this.key + ':' + _.today();
      if (!cb) {
        cb = max;
        max = min;
      }
      min_date = new Date(min * 1000);
      max_date = new Date(max * 1000);
      min_date.clearTime();
      max_date.clearTime();
      num_days = min_date.getDaysBetween(max_date);
      prefix = this.key;
      ret = {};
      arr = [];
      all_days = [];
      while (max_date >= min_date) {
        (function(_this) {
          return (function() {
            var day, unix;
            day = min_date.clone();
            day.clearTime();
            unix = Math.round(day.getTime() / 1000);
            arr.push(function(c) {
              return _this.members_keys.list(unix, c);
            });
            all_days.push(unix);
            ret[unix] = {
              date: day.toFormat('MM/DD/YYYY'),
              result: []
            };
            return min_date.addDays(1);
          });
        })(this)();
      }
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/taky/www/trk/src/module.iced",
            funcname: "Metrics.query"
          });
          _.par(arr, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                e = arguments[0];
                return r = arguments[1];
              };
            })(),
            lineno: 197
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          var _fn, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2;
          if (!(typeof r !== "undefined" && r !== null ? r.length : void 0)) {
            return cb(null, ret);
          }
          jobs = _this._jobs(r);
          fns = {};
          job_keys = [];
          blacklist = [];
          for (k in jobs) {
            v = jobs[k];
            for (path in v) {
              func = v[path];
              job_keys.push(path);
            }
          }
          if (opt.ignore == null) {
            opt.ignore = [];
          }
          if (opt.accept == null) {
            opt.accept = (_ref = opt.allow) != null ? _ref : [];
          }
          if (opt.ignore) {
            if (_.type(opt.ignore) === 'string') {
              opt.ignore = [opt.ignore];
            }
            opt.ignore = opt.ignore;
          }
          if (opt.accept) {
            if (_.type(opt.accept) === 'string') {
              opt.accept = [opt.accept];
            }
            opt.accept = opt.accept;
          }
          if (opt.ignore.length) {
            for (_i = 0, _len = job_keys.length; _i < _len; _i++) {
              x = job_keys[_i];
              raw = x.substr(_this.key.length + 1);
              parts = raw.split(':');
              parts.shift();
              raw = parts.join(':');
              _ref1 = opt.ignore;
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                pattern = _ref1[_j];
                if (minimatch(raw, pattern)) {
                  blacklist.push(x);
                }
              }
            }
          }
          if (opt.accept.length) {
            for (_k = 0, _len2 = job_keys.length; _k < _len2; _k++) {
              x = job_keys[_k];
              if (__indexOf.call(blacklist, x) >= 0) {
                continue;
              }
              raw = x.substr(_this.key.length + 1);
              parts = raw.split(':');
              parts.shift();
              raw = parts.join(':');
              valid = false;
              _ref2 = opt.accept;
              for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
                pattern = _ref2[_l];
                if (minimatch(raw, pattern)) {
                  valid = true;
                  break;
                }
              }
              if (!valid) {
                blacklist.push(x);
              }
            }
          }
          if (opt.return_jobs) {
            if (blacklist.length) {
              return cb(null, _.difference(job_keys, blacklist));
            } else {
              return cb(null, job_keys);
            }
          }
          _fn = function(k, v) {
            var k2, v2, _len4, _m, _ref3;
            if (blacklist.length) {
              for (k2 in v) {
                v2 = v[k2];
                if (__indexOf.call(blacklist, k2) >= 0) {
                  delete v[k2];
                }
              }
            }
            if (opt.ignore_jobs) {
              _ref3 = opt.ignore_jobs;
              for (_m = 0, _len4 = _ref3.length; _m < _len4; _m++) {
                x = _ref3[_m];
                if (k.includes(x)) {
                  return;
                }
              }
            }
            return fns[k] = (function(c) {
              return _.series(v, c);
            });
          };
          for (k in jobs) {
            v = jobs[k];
            _fn(k, v);
          }
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/home/taky/www/trk/src/module.iced",
              funcname: "Metrics.query"
            });
            _.par(fns, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  e2 = arguments[0];
                  return r2 = arguments[1];
                };
              })(),
              lineno: 279
            }));
            __iced_deferrals._fulfill();
          })(function() {
            var _fn1;
            if (e2 || !_.size(r2)) {
              return cb(null, ret);
            }
            _fn1 = function(results) {
              var item, location, _results;
              _results = [];
              for (location in results) {
                item = results[location];
                _results.push((function(item) {
                  if (!ret[item.day]) {
                    return;
                  }
                  item.key = location.split(':').pop().split('~');
                  return ret[item.day].result.push(item);
                })(item));
              }
              return _results;
            };
            for (type in r2) {
              results = r2[type];
              _fn1(results);
            }
            return cb(null, _this._format(ret, false));
          });
        };
      })(this));
    };

    Metrics.prototype.query_days = function(num_days, cb) {
      var max, max_date, min, min_date;
      max_date = new Date;
      min_date = new Date;
      if (num_days > 0) {
        num_days *= -1;
      }
      ++num_days;
      min_date.add({
        days: num_days
      });
      min = Math.round(min_date.getTime() / 1000);
      max = Math.round(max_date.getTime() / 1000);
      return this.query(min, max, cb);
    };

    Metrics.prototype._query_keys = function(keys, cb) {
      var afns, days, fns, k, max, min, range, start, v, x, _fn, _fn1, _i, _j, _len, _results;
      start = new Date;
      min = false;
      max = false;
      _fn = function(x) {
        var time;
        time = x.split(':')[1];
        if (!min || time < min) {
          min = time;
        }
        if (!max || time > max) {
          return max = time;
        }
      };
      for (_i = 0, _len = keys.length; _i < _len; _i++) {
        x = keys[_i];
        _fn(x);
      }
      range = (function() {
        _results = [];
        for (var _j = min; min <= max ? _j <= max : _j >= max; min <= max ? _j++ : _j--){ _results.push(_j); }
        return _results;
      }).apply(this);
      days = ((function() {
        var _k, _len1, _ref, _results1;
        _ref = 3600 * 24;
        _results1 = [];
        for ((_ref > 0 ? (_k = 0, _len1 = range.length) : _k = range.length - 1); _ref > 0 ? _k < _len1 : _k >= 0; _k += _ref) {
          x = range[_k];
          _results1.push(x);
        }
        return _results1;
      })()).reverse();
      fns = this._jobs(keys);
      afns = {};
      _fn1 = function(k, v) {
        return afns[k] = function(c) {
          return _.par(fns[k], c);
        };
      };
      for (k in fns) {
        v = fns[k];
        _fn1(k, v);
      }
      return _.par(afns, function(e, r) {
        var out, _fn2, _fn3, _k, _len1;
        out = {
          days: {},
          min: min,
          max: max,
          elapsed: "" + (new Date() - start) + "ms"
        };
        if (_.keys(r).length) {
          _fn2 = (function(_this) {
            return function(k, v) {
              var key, stats, _results1;
              _results1 = [];
              for (key in v) {
                stats = v[key];
                _results1.push((function(key, stats) {
                  var map_key;
                  if (!out.days[stats.day]) {
                    out.days[stats.day] = {};
                  }
                  if (!out.days[stats.day][stats.type]) {
                    out.days[stats.day][stats.type] = {};
                  }
                  map_key = stats.location.split(/:/);
                  map_key = map_key.slice(-1);
                  return out.days[stats.day][stats.type][map_key] = stats;
                })(key, stats));
              }
              return _results1;
            };
          })(this);
          for (k in r) {
            v = r[k];
            _fn2(k, v);
          }
        }
        _fn3 = function(x) {
          if (!out.days[x]) {
            out.days[x] = {};
          }
          return out.days[x].date = new Date(x * 1000).toFormat('MM/DD/YYYY');
        };
        for (_k = 0, _len1 = days.length; _k < _len1; _k++) {
          x = days[_k];
          _fn3(x);
        }
        return cb(null, out);
      });
    };

    Metrics.prototype._jobs = function(keys) {
      var fns, y, _fn, _i, _len;
      fns = {
        add: {},
        top: {},
        bmp: {},
        addv: {}
      };
      keys = _.uniq(_.flatten(keys));
      _fn = (function(_this) {
        return function(y) {
          var do_cache, fields, job, key, time, type, _j, _ref;
          if (_this.key.includes(':')) {
            y = y.split(_this.key).join('_tmp_');
          }
          _ref = y.split(/:/), key = _ref[0], time = _ref[1], type = 4 <= _ref.length ? __slice.call(_ref, 2, _j = _ref.length - 1) : (_j = 2, []), fields = _ref[_j++];
          if (y.includes('_tmp_')) {
            y = y.split('_tmp_').join(_this.key);
          }
          if (_.first(type) === 'addv') {
            type = ['addv'];
          }
          if (type.length === 2) {
            return;
          }
          job = {
            day: time,
            type: type.shift(),
            location: y,
            cache_key: "_cache:" + y
          };
          do_cache = false;
          if (job.day < _.today()) {
            do_cache = true;
          }
          if (job.type === 'add') {
            fns.add[job.location] = function(c) {
              var cache_r, e, ___iced_passed_deferral, __iced_deferrals, __iced_k;
              __iced_k = __iced_k_noop;
              ___iced_passed_deferral = iced.findDeferral(arguments);
              (function(__iced_k) {
                if (do_cache) {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/home/taky/www/trk/src/module.iced"
                    });
                    _this.memcached.get(job.cache_key, __iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          e = arguments[0];
                          return cache_r = arguments[1];
                        };
                      })(),
                      lineno: 407
                    }));
                    __iced_deferrals._fulfill();
                  })(function() {
                    if (cache_r) {
                      return c(null, cache_r);
                    }
                    return __iced_k();
                  });
                } else {
                  return __iced_k();
                }
              })(function() {
                return _this.redis.hgetall(job.location, function(e, r) {
                  var ___iced_passed_deferral1, __iced_deferrals, __iced_k;
                  __iced_k = __iced_k_noop;
                  ___iced_passed_deferral1 = iced.findDeferral(arguments);
                  job.result = r;
                  (function(__iced_k) {
                    if (do_cache) {
                      (function(__iced_k) {
                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                          parent: ___iced_passed_deferral1,
                          filename: "/home/taky/www/trk/src/module.iced"
                        });
                        _this.memcached.set(job.cache_key, job, 0, __iced_deferrals.defer({
                          lineno: 413
                        }));
                        __iced_deferrals._fulfill();
                      })(__iced_k);
                    } else {
                      return __iced_k();
                    }
                  })(function() {
                    return c(null, job);
                  });
                });
              });
            };
          }
          if (job.type === 'addv') {
            return fns.add[job.location] = function(c) {
              var cache_r, e, ___iced_passed_deferral, __iced_deferrals, __iced_k;
              __iced_k = __iced_k_noop;
              ___iced_passed_deferral = iced.findDeferral(arguments);
              (function(__iced_k) {
                if (do_cache) {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/home/taky/www/trk/src/module.iced"
                    });
                    _this.memcached.get(job.cache_key, __iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          e = arguments[0];
                          return cache_r = arguments[1];
                        };
                      })(),
                      lineno: 420
                    }));
                    __iced_deferrals._fulfill();
                  })(function() {
                    if (cache_r) {
                      return c(null, cache_r);
                    }
                    return __iced_k();
                  });
                } else {
                  return __iced_k();
                }
              })(function() {
                return _this.redis.hgetall(job.location, function(e, r) {
                  var ___iced_passed_deferral1, __iced_deferrals, __iced_k;
                  __iced_k = __iced_k_noop;
                  ___iced_passed_deferral1 = iced.findDeferral(arguments);
                  job.result = r;
                  (function(__iced_k) {
                    if (do_cache) {
                      (function(__iced_k) {
                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                          parent: ___iced_passed_deferral1,
                          filename: "/home/taky/www/trk/src/module.iced"
                        });
                        _this.memcached.set(job.cache_key, job, 0, __iced_deferrals.defer({
                          lineno: 426
                        }));
                        __iced_deferrals._fulfill();
                      })(__iced_k);
                    } else {
                      return __iced_k();
                    }
                  })(function() {
                    return c(null, job);
                  });
                });
              });
            };
          } else if (job.type === 'bmp') {
            return fns.bmp[job.location] = function(c) {
              var cache_r, e, ___iced_passed_deferral, __iced_deferrals, __iced_k;
              __iced_k = __iced_k_noop;
              ___iced_passed_deferral = iced.findDeferral(arguments);
              (function(__iced_k) {
                if (do_cache) {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/home/taky/www/trk/src/module.iced"
                    });
                    _this.memcached.get(job.cache_key, __iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          e = arguments[0];
                          return cache_r = arguments[1];
                        };
                      })(),
                      lineno: 433
                    }));
                    __iced_deferrals._fulfill();
                  })(function() {
                    if (cache_r) {
                      return c(null, cache_r);
                    }
                    return __iced_k();
                  });
                } else {
                  return __iced_k();
                }
              })(function() {
                return _this.redis.bitcount(job.location, function(e, r) {
                  var ___iced_passed_deferral1, __iced_deferrals, __iced_k;
                  __iced_k = __iced_k_noop;
                  ___iced_passed_deferral1 = iced.findDeferral(arguments);
                  job.result = r;
                  (function(__iced_k) {
                    if (do_cache) {
                      (function(__iced_k) {
                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                          parent: ___iced_passed_deferral1,
                          filename: "/home/taky/www/trk/src/module.iced"
                        });
                        _this.memcached.set(job.cache_key, job, 0, __iced_deferrals.defer({
                          lineno: 439
                        }));
                        __iced_deferrals._fulfill();
                      })(__iced_k);
                    } else {
                      return __iced_k();
                    }
                  })(function() {
                    return c(null, job);
                  });
                });
              });
            };
          } else if (job.type === 'top') {
            return fns.top[job.location] = function(c) {
              var args, cache_r, e, ___iced_passed_deferral, __iced_deferrals, __iced_k;
              __iced_k = __iced_k_noop;
              ___iced_passed_deferral = iced.findDeferral(arguments);
              (function(__iced_k) {
                if (do_cache) {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/home/taky/www/trk/src/module.iced"
                    });
                    _this.memcached.get(job.cache_key, __iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          e = arguments[0];
                          return cache_r = arguments[1];
                        };
                      })(),
                      lineno: 447
                    }));
                    __iced_deferrals._fulfill();
                  })(function() {
                    if (cache_r) {
                      return c(null, cache_r);
                    }
                    return __iced_k();
                  });
                } else {
                  return __iced_k();
                }
              })(function() {
                args = [job.location, '+inf', '-inf', 'WITHSCORES', 'LIMIT', 0, 250];
                return _this.redis.zrevrangebyscore(args, function(e, r) {
                  var i, last, ret, z, ___iced_passed_deferral1, __iced_deferrals, __iced_k, _fn1, _k, _len1;
                  __iced_k = __iced_k_noop;
                  ___iced_passed_deferral1 = iced.findDeferral(arguments);
                  ret = {};
                  if (r != null ? r.length : void 0) {
                    last = null;
                    i = 0;
                    _fn1 = function(z) {
                      ++i;
                      if (i % 2) {
                        ret[z] = null;
                        return last = z;
                      } else {
                        return ret[last] = parseInt(z);
                      }
                    };
                    for (_k = 0, _len1 = r.length; _k < _len1; _k++) {
                      z = r[_k];
                      _fn1(z);
                    }
                  }
                  job.result = ret;
                  (function(__iced_k) {
                    if (do_cache) {
                      (function(__iced_k) {
                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                          parent: ___iced_passed_deferral1,
                          filename: "/home/taky/www/trk/src/module.iced"
                        });
                        _this.memcached.set(job.cache_key, job, 0, __iced_deferrals.defer({
                          lineno: 476
                        }));
                        __iced_deferrals._fulfill();
                      })(__iced_k);
                    } else {
                      return __iced_k();
                    }
                  })(function() {
                    return c(null, job);
                  });
                });
              });
            };
          }
        };
      })(this);
      for (_i = 0, _len = keys.length; _i < _len; _i++) {
        y = keys[_i];
        _fn(y);
      }
      return fns;
    };

    Metrics.prototype._format = function(obj, cached) {
      var merge_numeric, output;
      merge_numeric = (function(uno, dos) {
        var k, v;
        if (!uno && dos) {
          return dos;
        }
        if (uno && !dos) {
          return uno;
        }
        for (k in dos) {
          v = dos[k];
          if (uno[k] == null) {
            uno[k] = 0;
          }
          uno[k] += +v;
        }
        return uno;
      });
      return output = {
        days: obj,
        cache: (cached ? 'hit' : 'miss'),
        find: function(o) {
          var arr, item, opt, parts, ret, tot, unix, v, val, x, _fn, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _ref3, _ref4;
          opt = {
            type: null,
            key: null,
            day: false,
            merge: false
          };
          if (typeof o === 'object') {
            if (o.keys && !o.key) {
              o.key = o.keys;
              delete o.keys;
            }
            opt = _.merge(o);
          } else {
            parts = o.split('/');
            opt.type = parts.shift();
            opt.key = parts.shift();
            if (parts.length) {
              opt.day = parts.shift();
            }
          }
          opt.key = opt.key.split('~').sort().join('~');
          if (opt.day) {
            if (((_ref = obj[opt.day]) != null ? _ref.result : void 0) == null) {
              return null;
            }
            _ref1 = obj[opt.day].result;
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              v = _ref1[_i];
              if (v.type === opt.type) {
                if (v.location.substr((opt.key.length + 1) * -1) === (":" + opt.key)) {
                  return v.result;
                }
              }
            }
            return null;
          } else {
            ret = {};
            for (unix in obj) {
              item = obj[unix];
              if (opt.type === 'bmp') {
                val = 0;
              } else if ((_ref2 = opt.type) === 'top' || _ref2 === 'add') {
                val = {};
              } else if (opt.type === 'addv') {
                val = {};
              }
              ret[item.date] = val;
              if (!(item != null ? (_ref3 = item.result) != null ? _ref3.length : void 0 : void 0)) {
                continue;
              }
              _ref4 = item.result;
              for (_j = 0, _len1 = _ref4.length; _j < _len1; _j++) {
                v = _ref4[_j];
                if (v.type === opt.type) {
                  if (v.location.substr((opt.key.length + 1) * -1) === (":" + opt.key)) {
                    ret[item.date] = v.result;
                  }
                }
              }
            }
            if (opt.merge) {
              tot = {};
              arr = _.vals(ret);
              _fn = function(x) {
                return tot = merge_numeric(tot, x);
              };
              for (_k = 0, _len2 = arr.length; _k < _len2; _k++) {
                x = arr[_k];
                _fn(x);
              }
              return tot;
            } else {
              return ret;
            }
          }
        }
      };
    };

    return Metrics;

  })();

  if (!module.parent) {
    log(/DEVEL/);
    process.exit(0);
  }

}).call(this);
